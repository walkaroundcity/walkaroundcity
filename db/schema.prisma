// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI_WITH_SCHEMA")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
model User {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String?
  profile_picture String?
  email           String   @unique
  role            Role     @default(USER)

  tokens   Token[]
  sessions Session[]
  Walk     Walk[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Walk {
  id          Int      @id @default(autoincrement())
  creator     User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shortname   String
  title       String
  picture     String?
  description String?
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  list_public Boolean  @default(false)
  tags        Tag[]    @relation("walk_tags")
  visitors    Int      @default(0)
  stops       Stop[]
  userId      Int

  @@unique([userId, id])
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  Walk      Walk?    @relation("walk_tags", fields: [walkId], references: [id])
  walkId    Int?
  Stop      Stop?    @relation("stop_tags", fields: [stopId], references: [id])
  stopId    Int?
}

model Stop {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Walk        Walk?    @relation(fields: [walkId], references: [id])
  walkId      Int?
  description String?
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  visitors    Int      @default(0)
  sequence    Int      @default(autoincrement())
  tags        Tag[]    @relation("stop_tags")
  title       String

  @@unique([id, sequence])
}

enum Role {
  USER
  ADMIN
}
